#define ___ {0,0,0}
#define PIN {245, 138, 255}
#define CYA {74, 255, 235}
#define WHI {255, 255, 255}

const uint8_t PROGMEM ledmap[][DRIVER_LED_TOTAL][3] = {
  [_BASE] = {
    ___, ___, ___, ___, ___, ___, ___, ___, ___, ___, ___, ___,
    ___, ___, ___, WHI, ___, ___, ___, ___, WHI, ___, ___, ___,
    ___, ___, ___, ___, ___, ___, ___, ___, ___, ___, ___, ___,
    ___, ___, ___, ___, ___, ___,      ___, ___, ___, ___, ___
  },

  [_RAISE] = {
    ___, ___, ___, ___, ___, ___, ___, ___, ___, ___, ___, ___,
    ___, ___, ___, PIN, ___, ___, ___, ___, PIN, ___, ___, ___,
    ___, ___, ___, ___, ___, ___, ___, ___, ___, ___, ___, ___,
    ___, ___, ___, ___, ___, ___,      ___, ___, ___, ___, ___
  },

  [_LOWER] = {
    ___, ___, ___, ___, ___, ___, ___, ___, ___, ___, ___, ___,
    ___, ___, ___, CYA, ___, ___, ___, ___, CYA, ___, ___, ___,
    ___, ___, ___, ___, ___, ___, ___, ___, ___, ___, ___, ___,
    ___, ___, ___, ___, ___, ___,      ___, ___, ___, ___, ___
  },

  [_ADJUST] = {
    ___, ___, ___, CYA, ___, ___, ___, ___, PIN, ___, ___, ___,
    ___, PIN, PIN, PIN, PIN, ___, ___, CYA, CYA, CYA, CYA, ___,
    ___, ___, ___, CYA, CYA, ___, ___, PIN, PIN, ___, ___, ___,
    CYA, ___, ___, ___, ___, PIN,      ___, ___, ___, ___, PIN
  },

  [_SYM1] = {
    ___, ___, CYA, ___, ___, ___, ___, ___, ___, ___, CYA, ___,
    CYA, ___, ___, ___, ___, ___, ___, ___, ___, ___, ___, ___,
    ___, ___, ___, ___, ___, ___, ___, ___, ___, ___, ___, ___,
    ___, ___, ___, ___, ___, ___,      ___, ___, ___, ___, ___
  },

  [_SYM2] = {
    ___, ___, CYA, ___, ___, ___, ___, ___, ___, ___, CYA, ___,
    CYA, ___, ___, ___, ___, ___, ___, ___, ___, ___, ___, ___,
    ___, ___, ___, ___, ___, ___, ___, ___, ___, ___, ___, ___,
    ___, ___, ___, ___, ___, ___,      ___, ___, ___, ___, ___
  },
};

void set_layer_color(int layer) {
  for (int i = 0; i < DRIVER_LED_TOTAL; i++) {
    RGB rgb = {
      .r = pgm_read_byte(&ledmap[layer][i][0]),
      .g = pgm_read_byte(&ledmap[layer][i][1]),
      .b = pgm_read_byte(&ledmap[layer][i][2]),
    };

    if (!rgb.r && !rgb.g && !rgb.b) {
      rgb_matrix_set_color(i, 0, 0, 0);
    } else {
      rgb_matrix_set_color(i, rgb.r, rgb.g, rgb.b);
    }
  }
}

// void rgb_matrix_indicators_user(void) {
//   // uint8_t osm = get_oneshot_mods();
//   // uint8_t locked_osm = get_oneshot_locked_mods();

//   switch (biton32(layer_state)) {
//     case _BASE:
//     case _TYPE:
//       set_layer_color(_BASE);
//       break;

//     case _RAISE:
//       set_layer_color(_RAISE);
//       break;

//     case _LOWER:
//       set_layer_color(_LOWER);
//       break;

//     case _ADJUST:
//       set_layer_color(_ADJUST);
//       break;

//     case _SYM1:
//       set_layer_color(_SYM1);
//       break;

//     case _SYM2:
//       set_layer_color(_SYM2);
//       break;

//    default:
//       rgb_matrix_set_color_all(0, 0, 0);
//     break;
//   }

//   // if (locked_osm & MOD_MASK_SHIFT) {
//   //   rgb_matrix_set_color(30, 238, 67, 67);
//   //   rgb_matrix_set_color(24, 238, 67, 67); // KC_Z
//   //   rgb_matrix_set_color(35, 238, 67, 67); // KC_SLSH
//   // } else if (osm & MOD_MASK_SHIFT) {
//   //   rgb_matrix_set_color(30, 255, 255, 255);
//   //   rgb_matrix_set_color(24, 255, 255, 255); // KC_Z
//   //   rgb_matrix_set_color(35, 255, 255, 255); // KC_SLSH
//   // }

//   // if (locked_osm & MOD_MASK_CTRL) {
//   //   rgb_matrix_set_color(29, 238, 67, 67);
//   //   rgb_matrix_set_color(25, 238, 67, 67); // KC_X
//   //   rgb_matrix_set_color(34, 238, 67, 67); // KC_DOT
//   // } else if (osm & MOD_MASK_CTRL) {
//   //   rgb_matrix_set_color(29, 255, 255, 255);
//   //   rgb_matrix_set_color(25, 255, 255, 255); // KC_X
//   //   rgb_matrix_set_color(34, 255, 255, 255); // KC_DOT
//   // }

//   // if (locked_osm & MOD_MASK_ALT) {
//   //   rgb_matrix_set_color(38, 238, 67, 67);
//   // } else if (osm & MOD_MASK_ALT) {
//   //   rgb_matrix_set_color(38, 255, 255, 255);
//   // }

//   // if (locked_osm & MOD_MASK_GUI) {
//   //   rgb_matrix_set_color(37, 238, 67, 67);
//   // } else if (osm & MOD_MASK_GUI) {
//   //   rgb_matrix_set_color(37, 255, 255, 255);
//   // }
// }

// bool process_record_user(uint16_t keycode, keyrecord_t *record) {
//   uint8_t mods;
//   bool rc = true;

//   switch (keycode) {
//     case KC_ESC:
//       if (record->event.pressed) {
//         if ((mods = get_oneshot_mods()) && !has_oneshot_mods_timed_out()) {
//           clear_oneshot_mods();
//           unregister_mods(mods);
//           rc = false;
//         }

//         if ((mods = get_oneshot_locked_mods())) {
//           clear_oneshot_locked_mods();
//           unregister_mods(mods);
//           rc = false;
//         }

//         if (is_oneshot_layer_active()) {
//           layer_clear();
//           rc = false;
//         }

//         break;
//       }
//   }


//   return rc;
// }
